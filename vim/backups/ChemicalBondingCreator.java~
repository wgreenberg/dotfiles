import java.util.*;
import java.util.concurrent.Semaphore;

public class ChemicalBondingCreator implements Runnable {

//	public Semaphore caWaiton = new Semaphore(0);
  public HashMap<String, Semaphore> waitons = new HashMap<String, Semaphore>();
//  public Semaphore caMutex = new Semaphore(1);
  public HashMap<String, Semaphore> mutexes = new HashMap<String, Semaphore>();
//	public List<CarbonAtom> caList = new ArrayList<CarbonAtom>();
  public HashMap<String, ArrayList<Atom>> atoms = 
    new HashMap<String, ArrayList<Atom>>();
//  public int numHydrogen, numCarbon;
  public HashMap<String, Integer> atomNumbers = new HashMap<String, Integer>();
  String molecule;
  
  public ChemicalBondingCreator(molecule, HashMap<String, Integer> atomSpec){
    this.molecule = molecule;

    //atomSpec in form of [atomName: numAtoms, ...]
    for(String atom : atomSpec.keySet()){
      waitons.put(atom, new Semaphore(0));
      mutexes.put(atom, new Semaphore(1));
      atoms.put(atom, new ArrayList<Atom>());
      atomNumbers.put(atom, atomSpec.get(atom));
    }
  }

  public boolean bondReady(){
    boolean answer = true;
    try{
      for(String atom : mutexes.keySet()){
        mutexes.get(atom).acquire();
        if(atoms.get(atom).size() >= atomNumbers.get(atom))
          answer = answer && true;
        else answer = false;
        mutexes.get(atom).release();
      }
    } catch(Exception e) {
      System.out.println(e);
      answer = false;
    }

    return answer;
  }

	@Override
	public void run() {
    System.out
        .println("Chemical bonding creator: enough atoms to create a "+ this.molecule + " molecule");

    // hopefully, this will release the
    for(String atom : waitons.keySet()){
      waitons.get(atom).release(atomNumbers.get(atom));
    }
	}

}
