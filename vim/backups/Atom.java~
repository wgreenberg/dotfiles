import java.util.*;
import java.util.concurrent.Semaphore;

public class Atom implements Runnable {

  private ChemicalBondingCreator cbc;
  String atom;
  private int count;

  public Atom(String atom, ChemicalBondingCreator cbc, int count){
    this.atom = atom;
    this.cbc = cbc;
    this.count = count;
  }

  @Override
  public void run(){
		System.out.println(this.atom + " atom no: " + count + " created.");
    try{
      synchronized (cbc.mutexes.get(atom)) {
        cbc.mutexes.get(atom).acquire();
        cbc.atoms.get(atom).add(this);
        cbc.mutexes.get(atom).release();
      }
    } catch (Exception e){
      System.out.println(e);
    }
		System.out.println(this.atom + " atom no: " + count
				+ " waiting for bonding.");
    synchronized(this.cbc){
      if(cbc.bondReady()){
        Thread generatorThread = new Thread(this.cbc);
        generatorThread.start();
      }
    }
		try {

			synchronized (cbc.waitons.get(atom)) {
				cbc.waitons.get(atom).acquire(1);
        synchronized (cbc.mutexes.get(atom)) {
          cbc.mutexes.get(atom).acquire();
          cbc.atoms.get(atom).remove(this);
          cbc.mutexes.get(atom).release();
        }
			}
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println(this.atom + " atom no: " + count + " bonded, done.");

  }

}
